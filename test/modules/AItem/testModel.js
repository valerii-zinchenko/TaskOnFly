/*
 TaskOnFly allows you easy manage your tasks and task lists on the fly from your mobile or desktop device.
 Copyright (C) 2014-2015  Valerii Zinchenko

 This file is part of TaskOnFly.

 TaskOnFly is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 TaskOnFly is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with TaskOnFly.  If not, see <http://www.gnu.org/licenses/>.


 All source files are available at: http://github.com/valerii-zinchenko/TaskOnFly
*/


define([
	'modules/AItem/Model'
], function(Module){
	suite('AItem.Model', function() {
		suite('Constructor', function() {
			setup(function() {
				sinon.spy(Module.prototype, '_genID');
			});
			teardown(function(){
				Module.prototype._genID.restore();
			});

			test('is EventHandler encapsulated', function(){
				assert.equal(Module.prototype.trigger, EventHandler.prototype.trigger, 'trigger() method is not registered');
				assert.equal(Module.prototype.listen, EventHandler.prototype.listen, 'listen() method is not registered');
				assert.equal(Module.prototype.removeListener, EventHandler.prototype.removeListener, 'removeListener() method is not registered');
			});

			test('initialize()', function() {
				var data = {};
				assert.doesNotThrow(function(){
					new Module();
				});

				assert.isTrue(Module.prototype._genID.calledOnce, 'New model ID should be generated by creating new model');
			});

			test('Is Module a singleton?', function() {
				assert.notEqual(new Module(), new Module(), 'Module should not be a singleton');
			});
		});

		suite('Methods', function(){
			var task;
			setup(function(){
				task = new Module();

				sinon.stub(task, 'trigger', function(){});
			});
			teardown(function(){
				task.trigger.restore();
				task = null;
			});

			test('destruct()', function(){
				var id = task.public.id;
				
				assert.doesNotThrow(function(){
					task.destruct();
				});
				assert.isTrue(task.trigger.calledOnce, 'destruct() should trigger an event to let the subscribers know about changes');
				assert.equal(task.trigger.args[0][0], 'remove', '"remove" event should be triggered');
				assert.equal(task.trigger.args[0][1], id, '"remove" event should be triggered with model id');
			});

			test('toggleStatus()', function() {
				assert.doesNotThrow(function(){
					task.toggleStatus();
				});

				assert.isTrue(task.trigger.calledOnce, 'Some event should be triggered');
				assert.equal(task.trigger.args[0][0], 'updateIsDone', '"updateIsDone" event should be triggered');
				assert.equal(task.trigger.args[0][1], task.public.isDone, '"updateIsDone" event with actual property should be triggered');
			});

			suite('_buildPropertyEventName()', function(){
				test('without prefix', function(){
					var name;
					assert.doesNotThrow(function(){
						name = task._buildPropertyEventName('isDone');
					});
					assert.equal(name, 'IsDone', 'Event name was incorrectly created');
				});

				test('with prefix', function(){
					var name;
					assert.doesNotThrow(function(){
						name = task._buildPropertyEventName('isDone', 'update');
					});
					assert.equal(name, 'updateIsDone', 'Event name was incorrectly created with specified prefix');
				});
			});

			suite('triggerEvents()', function(){
				setup(function(){
					task.trigger.reset();
				});

				test('simple data object', function(){
					var data = {
						eventName: 'event value',
						secondEvent: 'second value'
					};

					assert.doesNotThrow(function(){
						task.triggerEvents(data);
					});
					assert.isTrue(task.trigger.calledTwice, 'Incorrect amount of events was triggered');
					assert.isTrue(task.trigger.calledWithExactly('updateEventName', data.eventName), 'updateEventName was incorrectly or not triggered');
					assert.isTrue(task.trigger.calledWithExactly('updateSecondEvent', data.secondEvent), 'updateSecondEvent was incorrectly or not triggered');
				});

				test('complex data object', function(){
					var data = {
						eventObj: {
							event: 'value'
						},
						topEvent: 'event'
					};

					assert.doesNotThrow(function(){
						task.triggerEvents(data);
					});
					assert.isTrue(task.trigger.calledThrice, 'Incorrect amount of events was triggered');
					assert.isTrue(task.trigger.calledWithExactly('updateEvent', data.eventObj.event), 'updateEvent was incorrectly or not triggered');
					assert.isTrue(task.trigger.calledWithExactly('updateEventObj', data.eventObj), 'updateEvent was incorrectly or not triggered');
					assert.isTrue(task.trigger.calledWithExactly('updateTopEvent', data.topEvent), 'updateEvent was incorrectly or not triggered');
				});
			});
		});
	});
});
